/**
 * Author: Kaizhong Ying Andrew ID: kying
 * Last Modified: February 18, 2024
 *
 * RemoteVariableServerUDP.java operates as a UDP server managing integer sums for unique client IDs.
 * It supports 'add', 'subtract', and 'get' operations on sums stored in a TreeMap, identified by client ID.
 * Upon receiving a request, it processes the specified operation and returns the result to the client.
 * Designed for educational purposes to demonstrate stateful server-side operations over UDP.
 */



import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.nio.ByteBuffer;
import java.util.TreeMap;

public class RemoteVariableServerUDP {
    private static final TreeMap<Integer, Integer> clientSums = new TreeMap<>();
    // Implementation includes creating a menu, preparing operations,
    // sending requests, and displaying responses.
    public static void main(String[] args) {
        System.out.println("Server is running.");
        System.out.println("Operation a refers to add, s refers to subtract and g refers to get sum");
        try (DatagramSocket socket = new DatagramSocket(6789)) {
            while (true) {
                // The bytes buffer size and turn of wrapped data are suggested by ChatGPT
                // Buffer to accommodate ID (4 bytes), operation (2 bytes), and value (4 bytes).
                byte[] buffer = new byte[10];
                DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
                socket.receive(packet);

                ByteBuffer wrapped = ByteBuffer.wrap(packet.getData());
                // First 4 bytes: Client ID
                int id = wrapped.getInt();
                // Next 2 bytes: Operation code ('a', 's', 'g')
                char operation = wrapped.getChar();

                int value = 0; // Initialize value; might be updated based on operation
                // Only try to read an integer value if the operation is add ('a') or subtract ('s')
                if (operation == 'a' || operation == 's') {
                    // Next 4 bytes: Value for addition or subtraction
                    value = wrapped.getInt();
                }
                // Process the operation
                int result = processOperation(id, operation, value);

                // Prepare and send response
                byte[] replyData = ByteBuffer.allocate(4).putInt(result).array();
                DatagramPacket replyPacket = new DatagramPacket(replyData, replyData.length, packet.getAddress(), packet.getPort());
                socket.send(replyPacket);
            }
        } catch (Exception e) {
            System.err.println("Server error: " + e.getMessage());
            e.printStackTrace();
        }
    }
    // The helper method processOperation is generated by ChatGpt
    private static int processOperation(int id, char operation, int value) {
        // Retrieve current sum for ID, defaulting to 0 if ID is unseen
        int currentSum = clientSums.getOrDefault(id, 0);

        switch (operation) {
            case 'a': // Add
                currentSum += value;
                break;
            case 's': // Subtract
                currentSum -= value;
                break;
            case 'g': // Get current sum, no change to currentSum needed
                break;
            default:
                System.out.println("Unknown operation: " + operation);
        }

        // Update the sum for the client ID1
        clientSums.put(id, currentSum);

        // Log operation
        System.out.printf("ID: %d, Operation: %s, Value: %d, New Sum: %d\n",
                id, operation, value, currentSum);

        return currentSum; // Return the updated or retrieved sum
    }
}
