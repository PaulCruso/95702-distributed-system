/**
 * Author: Kaizhong Ying Andrew ID: kying
 * Last Modified: February 17, 2024
 *
 * Acts as a UDP client sending integers to a server for addition, showcasing client-side UDP operations.
 * Users input integers and a server port, with the server returning a running sum after each submission.
 * Utilizes a proxy method 'add' for communication abstraction, reflecting a simple RPC mechanism.
 */
import java.net.*;
import java.io.*;

public class AddingClientUDP {
    public static void main(String[] args) {
        System.out.println("The client is running.");
        BufferedReader inFromUser = new BufferedReader(new InputStreamReader(System.in));
        // get the server port number
        System.out.println("Please enter server port:");
        int serverPort = 0;
        try {
            serverPort = Integer.parseInt(inFromUser.readLine());
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        System.out.println();

        while (true) {
            String userInput = null;
            try {
                userInput = inFromUser.readLine();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            // If send the halt! message, the client will break
            if ("halt!".equals(userInput)) {
                System.out.println("Client side quitting.");
                break;
            }

            try {
                // get the user input of the number
                int number = Integer.parseInt(userInput);
                // Delegate the addition to the server via the proxy "add" method.
                int result = 0;
                result = add(number, serverPort);
                System.out.println("The server returned " + result + ".");
            } catch (NumberFormatException e) {
                System.out.println("Please enter a valid integer or 'halt!' to quit.");
            }catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
    }

    /**
     * Acts as a proxy to request addition operation from the server.
     * @param i The integer to be added to the server's running sum.
     * @param serverPort The port on which the server is listening.
     * @return The updated sum received from the server.
     * @throws IOException If an I/O error occurs during communication.
     */
    // the add, byteArrayToInt, intToByteArray three methods is generated by ChatGPT
    public static int add(int i, int serverPort) throws IOException {
        DatagramSocket socket = new DatagramSocket();
        InetAddress address = InetAddress.getByName("localhost");
        byte[] buf = intToByteArray(i); // Convert the integer to a byte array for transmission.
        DatagramPacket packet = new DatagramPacket(buf, buf.length, address, serverPort);
        socket.send(packet); // Send the addition request to the server.

        byte[] buffer = new byte[4]; // Prepare buffer for the server's response.
        DatagramPacket response = new DatagramPacket(buffer, buffer.length);
        socket.receive(response); // Receive the updated sum from the server.
        socket.close(); // Close the socket after receiving the response.

        return byteArrayToInt(buffer); // Convert the byte array back to an integer and return.
    }

    // Utility method to convert a byte array to an int.
    private static int byteArrayToInt(byte[] bytes) {
        return java.nio.ByteBuffer.wrap(bytes).getInt();
    }

    // Utility method to convert an int to a byte array.
    private static byte[] intToByteArray(int value) {
        return java.nio.ByteBuffer.allocate(4).putInt(value).array();
    }
}



